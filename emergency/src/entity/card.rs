//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use super::sea_orm_active_enums::CardCardtypeEnum;
use super::sea_orm_active_enums::CardSizeEnum;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "card")]
pub struct Model {
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub title: String,
    pub content: String,
    pub icon: Option<String>,
    pub position: Option<i32>,
    #[sea_orm(column_name = "dataConfig", column_type = "JsonBinary", nullable)]
    pub data_config: Option<Json>,
    #[sea_orm(column_name = "dashboardId")]
    pub dashboard_id: Option<Uuid>,
    #[sea_orm(column_name = "cardType")]
    pub card_type: Option<CardCardtypeEnum>,
    pub size: Option<CardSizeEnum>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::dashboard::Entity",
        from = "(Column::DashboardId, Column::DashboardId)",
        to = "(super::dashboard::Column::Id, super::dashboard::Column::Id)",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Dashboard,
}

impl Related<super::dashboard::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Dashboard.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
