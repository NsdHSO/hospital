//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use super::sea_orm_active_enums::EmergencyIncidenttypeEnum;
use super::sea_orm_active_enums::EmergencySeverityEnum;
use super::sea_orm_active_enums::EmergencyStatusEnum;
use chrono::NaiveDateTime;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "emergency")]
pub struct Model {
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: Uuid,
    #[sea_orm(column_name = "emergencyIc", column_type = "Text")]
    pub emergency_ic: String,
    #[sea_orm(column_name = "reportedBy")]
    pub reported_by: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub notes: Option<String>,
    #[sea_orm(column_name = "resolvedAt", nullable)]
    pub resolved_at: Option<NaiveDateTime>,
    #[sea_orm(
        column_name = "modificationAttempts",
        column_type = "JsonBinary",
        nullable
    )]
    pub modification_attempts: Option<Json>,
    #[sea_orm(column_name = "idAmbulance")]
    pub id_ambulance: Option<Uuid>,
    #[sea_orm(
        column_name = "emergencyLatitude",
        column_type = "Decimal(Some((9, 6)))"
    )]
    pub emergency_latitude: Decimal,
    #[sea_orm(
        column_name = "emergencyLongitude",
        column_type = "Decimal(Some((9, 6)))"
    )]
    pub emergency_longitude: Decimal,
    pub status: EmergencyStatusEnum,
    pub severity: EmergencySeverityEnum,
    #[sea_orm(column_name = "incidentType")]
    pub incident_type: EmergencyIncidenttypeEnum,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::ambulance::Entity",
        from = "(Column::IdAmbulance, Column::IdAmbulance)",
        to = "(super::ambulance::Column::Id, super::ambulance::Column::Id)",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Ambulance,
}

impl Related<super::ambulance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ambulance.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct EmergencyRequestBody {
    pub notes: Option<String>,
    #[serde(rename = "emergencyLatitude")]
    pub emergency_latitude: Decimal,
    #[serde(rename = "emergencyLongitude")]
    pub emergency_longitude: Decimal,
    #[serde(rename = "incidentType")]
    pub incident_type: EmergencyIncidenttypeEnum,
    pub description: Option<String>,
}
