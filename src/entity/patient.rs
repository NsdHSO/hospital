//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use crate::entity::person;
use crate::entity::sea_orm_active_enums::{BloodTypeEnum, GenderEnum};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "patient")]
pub struct Model {
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid, // PK and FK to person
    pub hospital_id: Option<Uuid>,
    pub emergency_contact: Option<String>,
    pub blood_type: Option<BloodTypeEnum>,
    pub allergies: Option<Vec<String>>,
    #[sea_orm(column_type = "Text", nullable)]
    pub medical_history: Option<String>,
    #[sea_orm(unique)]
    pub patient_ic: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "person::Entity",
        from = "Column::Id",
        to = "person::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Person,
}

impl ActiveModelBehavior for ActiveModel {}

impl Related<person::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Person.def()
    }
}

#[derive(Default, Debug, Serialize, Deserialize, Clone)]
pub struct PatientRequestBody {
    pub patient_ic: Option<String>,
    pub first_name: Option<String>,
    pub last_name: Option<String>,
    pub hospital_id: Option<Uuid>,
    pub date_of_birth: Option<Date>,
    pub gender: Option<GenderEnum>,
    pub phone: Option<String>,
    pub email: Option<String>,
    pub address: Option<String>,
    pub emergency_contact: Option<String>,
    pub blood_type: Option<BloodTypeEnum>,
    pub allergies: Option<Vec<String>>,
    pub medical_history: Option<String>,
}

#[derive(Serialize, Debug)]
pub struct PatientWithPerson {
    pub patient: Model,
    pub person: person::Model,
}
