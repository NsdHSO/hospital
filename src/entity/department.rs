//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use crate::entity::hospital;
use super::sea_orm_active_enums::DepartmentNameEnum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "department")]
pub struct Model {
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub hospital_id: Uuid,
    pub floor: Option<i32>,
    pub head_of_department: Option<String>,
    pub phone: Option<String>,
    pub description: Option<String>,
    pub capacity: Option<i32>,
    #[sea_orm(unique)]
    pub name: DepartmentNameEnum,
    pub department_ic: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "hospital::Entity",
        from = "Column::HospitalId",
        to = "super::hospital::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Hospital,
}

impl Related<super::hospital::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Hospital.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct DepartmentRequestBody {
    pub hospital_name: String,
    pub floor: Option<i32>,
    pub head_of_department: Option<String>,
    pub phone: Option<String>,
    pub description: Option<String>,
    pub capacity: Option<i32>,
    pub name: Option<DepartmentNameEnum>,
    pub department_ic: Option<String>,
}
